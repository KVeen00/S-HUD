{"slots":{"0":{"name":"s2","type":{"events":[],"methods":[]}},"1":{"name":"s1","type":{"events":[],"methods":[]}},"2":{"name":"s3","type":{"events":[],"methods":[]}},"3":{"name":"s4","type":{"events":[],"methods":[]}},"4":{"name":"s5","type":{"events":[],"methods":[]}},"5":{"name":"s6","type":{"events":[],"methods":[]}},"6":{"name":"s7","type":{"events":[],"methods":[]}},"7":{"name":"s8","type":{"events":[],"methods":[]}},"8":{"name":"s9","type":{"events":[],"methods":[]}},"9":{"name":"s10","type":{"events":[],"methods":[]}},"10":{"name":"s11","type":{"events":[],"methods":[]}},"11":{"name":"s12","type":{"events":[],"methods":[]}},"12":{"name":"s13","type":{"events":[],"methods":[]}},"13":{"name":"s14","type":{"events":[],"methods":[]}},"14":{"name":"slot15","type":{"events":[],"methods":[]}},"15":{"name":"slot16","type":{"events":[],"methods":[]}},"16":{"name":"slot17","type":{"events":[],"methods":[]}},"17":{"name":"slot18","type":{"events":[],"methods":[]}},"18":{"name":"slot19","type":{"events":[],"methods":[]}},"19":{"name":"slot20","type":{"events":[],"methods":[]}},"20":{"name":"slot21","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-------------------UNIT START----------------------------------\n\npitchInput = 0\nrollInput = 0\nyawInput = 0\nbrakeInput = 0\n\n-------------------HUD Config-----------------------------------\nshow_HUD = true --export: Show Custom HUD if checked, Vanilla HUD shown if unchecked\nHud_Opacity_percent= 90 --export: Hud Opacity Percentage\nHud_font_size= 100 --export: HUD font size factor in percent\nHud_line_size= 100 --export HUD line size factor in percent\nif show_HUD==true then hud_state = 1 else hud_state = 0 end\nopacity = Hud_Opacity_percent/100\nsy = system.getScreenHeight()\nsx = system.getScreenWidth()\nscaledStroke = (1*sx/1980)*(Hud_line_size/100)\nscaledFont = (16*sx/1980)*(Hud_font_size/100)\nAuto_Pitch_Roll = true --export: [Atmo Only] Activate auto pitch and roll if under set speeds\nAuto_pitch_speed = 50 --export: [Atmo Only] Set speed to engage auto pitch when under this speed\nAuto_roll_speed = 200 --export: [Atmo Only] Set speed to engage auto roll when under this speed\nif Auto_Pitch_Roll then\n    autostabspeed = Auto_pitch_speed\n    autorollspeed = Auto_roll_speed\n    else\n    autostabspeed = 0\n    autorollspeed = 0\nend\nslowcruise = 300 --export: [Atmo Only] Slow speed cruise\natmolimit = 1250 --[Atmo Only] Fast speed cruise, and max ship speed in Atmo\n\n----------------Conditional menu variables\nShowDMG = false --export: Show damaged element list\nDMGpage = 1\nDMGitems = 10\n----------------DrawMenu variables\nmenupage = 1\nMenu_x_pos = 1 --export: X position of action menu\nMenu_y_pos = 4 --export: Y position of action menu\nMenu_width = 12 --width of action menu\n\n----------------DrawFuelLevels variables \nfuel_xpos = 1 --export fuel HUD x postion\nfuel_ypos = 40 --export fuel HUD y postion\nfuel_scale = 4 --export fuel HUD width scaling\nfuel_height = 20 --export fuel HUD height percent of screen\nWarnPoint = 50 --export\nCriticalPoint = 25 --export\nshowTankname = true --export: Show tank name on fuel guage (rename tanks to 4 character name)\n\n-----flight variables--------------------------------------------\nautobrake = \"ON\"\nbrakeInput = brakeInput + 1\nstabilizer = \"OFF\"\nPitchDeg = 0\nRollDeg = 0\nstabilizerHold = 0\nhoverset = 0\nhovermax = 0\naltHold = \"OFF\"\n\n\n-----------autoattach start--------------------------------------------\ntankListN = {}\ntankListK = {}\ntankListR = {}\nscreenList = {}\ndbList = {}\ndoorList = {}\nfieldList = {}\nlightList = {}\nbuttonList = {}\nswitchList = {}\n\n\nfunction parseAttached(item)\n    eclass=item.getClass()\n    if eclass==\"CoreUnitDynamic\" then core=item\n    elseif eclass==\"AtmoFuelContainer\" then tankListN[#tankListN+1]=item \n    elseif eclass==\"SpaceFuelContainer\" then tankListK[#tankListK+1]=item \n    elseif eclass==\"RocketFuelContainer\" then tankListR[#tankListR+1]=item \n    elseif eclass==\"ScreenUnit\" then screenList[#screenList+1]=item  \n    elseif eclass==\"DoorUnit\" then doorList[#doorList+1]=item  \n    elseif eclass==\"ForceFieldUnit\" then fieldList[#fieldList+1]=item  \n    elseif eclass==\"LightUnit\" then lightList[#lightList+1]=item  \n    elseif eclass==\"TelemeterUnit\" then telemeter=item  \n    elseif eclass==\"WarpDriveUnit\" then warpdrive=item  \n    elseif eclass==\"GyroUnit\" then gyro=item  \n    elseif eclass==\"AntiGravityGeneratorUnit\" then antigrav=item  \n    elseif eclass==\"ManualButtonUnit\" then buttonList[#buttonList+1]=item  \n    elseif eclass==\"ManualSwitchUnit\" then switchList[#switchList+1]=item  \n    elseif string.match(eclass,\"ShieldGenerator\") then shield=item  \n    end\nend\n\nif s1 ~= nil then parseAttached(s1) end\nif s2 ~= nil then parseAttached(s2) end\nif s3 ~= nil then parseAttached(s3) end\nif s4 ~= nil then parseAttached(s4) end\nif s5 ~= nil then parseAttached(s5) end\nif s6 ~= nil then parseAttached(s6) end\nif s7 ~= nil then parseAttached(s7) end\nif s8 ~= nil then parseAttached(s8) end\nif s9 ~= nil then parseAttached(s9) end\nif s10 ~= nil then parseAttached(s10) end\n\n--TelemeterUnit\n--WarpDriveUnit\n--DetectionZoneUnit\n--ManualButtonUnit\n--ManualSwitchUnit\n--LightUnit\n--LandingGearUnit\n--GyroUnit\n--ForceFieldUnit\n--DoorUnit\n--AntiGravityGeneratorUnit\n--ShieldGenerator...\n-----------autoattach end--------------------------------------------\n\n-----------initialize conditionals start--------------------------------------------\n\nNav = Navigator.new(system, core, unit)\nNav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})\nNav.axisCommandManager:setTargetGroundAltitude(-1) --set ground altitude\n\nif hud_state==0 then\n    if antigrav ~= nil then antigrav.showWidget() end\n    if warpdrive ~= nil then warpdrive.showWidget() end\n    if shield ~= nil then shield.showWidget() end\n    unit.showWidget()\n    else\n    unit.hideWidget()\nend\nif antigrav ~= nil then agset = math.floor(antigrav.getTargetAltitude()) end\n\n-----------initialize conditionals end--------------------------------------------\n\n----------------MakeTime start-----------------------------------------\ndisplayTime = true --export Display update clock\ntimemode12 = true --export time display in 12 hour time\n\nfunction makeTime(timemode)\n        tick = system.getUtcTime() + system.getUtcOffset()\n        tick = tick%86400\n        h = math.floor(tick/3600)\n        if timemode==true and h>12 then h=h-12 end\n        tick = tick%3600\n        m = math.floor(tick/60)\n        tick = tick%60\n        s = math.floor(tick)\n        if m < 10 then m=\"0\"..m end\n        if s < 10 then s=\"0\"..s end\n        returnTime = h..\":\"..m..\":\"..s\n        return returnTime\nend\n----------------MakeTime end-----------------------------------------\n\n----------------DrawFuelLevels start-----------------------------------------\n\n--call: DrawFuelLevels(tankListN, tankListK, tankListR, fuel_xpos, fuel_ypos, fuel_height, fuel_scale, 100*scaledFont/sx, WarnPoint, CriticalPoint, showTankname)\n\nfunction DrawFuelLevels(nlist, klist, rlist, fuelx, fuely, fuelh, fscale, fontheight, wPoint, cPoint, tname)\n    local rfactor = 0.5\n    local tpad = 0.04\n    local returnsvg = \"\"\n    local tankCount = #nlist+#klist+#rlist\n    local fuelw = tankCount*fscale\n    local padvalue = fuelw/(3*tankCount+1)\n    local barheight = fuelh-fuelh*2*tpad-fontheight\n    local bartop = fuely+fuelh*tpad\n    local barbottom = bartop+barheight\n    if tname == true then\n        bartop = bartop +fontheight\n        barheight = barbottom - bartop\n    end\n    local npad = 0\n    local kpad = 0\n    if #nlist > 0 then npad = (#nlist*3)*padvalue end\n    if #klist > 0 then kpad = (#klist*3)*padvalue end\n    \n    returnsvg = [[<rect x=\"]]..fuelx..[[%\" y=\"]]..fuely..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\" width=\"]]..fuelw..[[%\" height=\"]]..fuelh..[[%\" fill=\"gray\" stroke=\"blue\" />]]   \n-------------draw nitron\n    for i,v in ipairs(nlist) do\n        local tankpercent = json.decode(v.getWidgetData()).percentage or 0\n        local tankname = v.getName() or \"NA\"\n        local fillColor = \"blue\"\n        local startpoint = fuelx\n        if tankpercent <= cPoint then\n            fillColor = \"red\"\n        elseif tankpercent > cPoint and tankpercent <= wPoint then\n            fillColor = \"orange\"\n        end\n        returnsvg = returnsvg..[[<rect x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)..[[%\" y=\"]]..bartop..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\"  width=\"]]..2*padvalue..[[%\" height=\"]]..barheight..[[%\" fill=\"none\" stroke=\"blue\"/>]]   \n        returnsvg = returnsvg..[[<rect x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)..[[%\" y=\"]]..barbottom-(barheight*(tankpercent/100))..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\"  width=\"]]..2*padvalue..[[%\" height=\"]]..(barheight*(tankpercent/100))..[[%\" fill=\"]]..fillColor..[[\" stroke=\"none\"/>]]\n        returnsvg = returnsvg..[[<text x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)+padvalue..[[%\" y=\"]]..fuely+fuelh-(tpad/2)*fuelh..[[%\" text-anchor=\"middle\" stroke=\"black\" fill=\"white\">]]..tankpercent..[[%</text>]]\n        if tname == true then returnsvg = returnsvg..[[<text x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)+padvalue..[[%\" y=\"]]..bartop-(tpad/2)*fuelh..[[%\" text-anchor=\"middle\" stroke=\"black\" fill=\"white\">]]..tankname..[[</text>]] end\n    end\n-------------draw kergon\n    for i,v in ipairs(klist) do\n        local tankpercent = json.decode(v.getWidgetData()).percentage or 0\n        local tankname = v.getName() or \"NA\"\n        local fillColor = \"yellow\"\n        local startpoint = fuelx+npad\n        if tankpercent <= cPoint then\n            fillColor = \"red\"\n        elseif tankpercent > cPoint and tankpercent <= wPoint then\n            fillColor = \"orange\"\n        end\n        returnsvg = returnsvg..[[<rect x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)..[[%\" y=\"]]..bartop..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\"  width=\"]]..2*padvalue..[[%\" height=\"]]..barheight..[[%\" fill=\"none\" stroke=\"yellow\" />]]   \n        returnsvg = returnsvg..[[<rect x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)..[[%\" y=\"]]..barbottom-(barheight*(tankpercent/100))..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\"  width=\"]]..2*padvalue..[[%\" height=\"]]..(barheight*(tankpercent/100))..[[%\" fill=\"]]..fillColor..[[\" stroke=\"none\"/>]]\n        returnsvg = returnsvg..[[<text x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)+padvalue..[[%\" y=\"]]..fuely+fuelh-(tpad/2)*fuelh..[[%\" text-anchor=\"middle\" stroke=\"black\" fill=\"white\">]]..tankpercent..[[%</text>]]\n        if tname == true then returnsvg = returnsvg..[[<text x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)+padvalue..[[%\" y=\"]]..bartop-(tpad/2)*fuelh..[[%\" text-anchor=\"middle\" stroke=\"black\" fill=\"white\">]]..tankname..[[</text>]] end\n    end\n\n-------------draw rocket\n    for i,v in ipairs(rlist) do\n        local tankpercent = json.decode(v.getWidgetData()).percentage or 0\n        local tankname = v.getName() or \"NA\"\n        local fillColor = \"purple\"\n        local startpoint = fuelx+npad+kpad\n        if tankpercent <= cPoint then\n            fillColor = \"red\"\n        elseif tankpercent > cPoint and tankpercent <= wPoint then\n            fillColor = \"orange\"\n        end\n        returnsvg = returnsvg..[[<rect x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)..[[%\" y=\"]]..bartop..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\"  width=\"]]..2*padvalue..[[%\" height=\"]]..barheight..[[%\" fill=\"none\" stroke=\"purple\"/>]]   \n        returnsvg = returnsvg..[[<rect x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)..[[%\" y=\"]]..barbottom-(barheight*(tankpercent/100))..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\"  width=\"]]..2*padvalue..[[%\" height=\"]]..(barheight*(tankpercent/100))..[[%\" fill=\"]]..fillColor..[[\" stroke=\"none\"/>]]\n        returnsvg = returnsvg..[[<text x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)+padvalue..[[%\" y=\"]]..fuely+fuelh-(tpad/2)*fuelh..[[%\" text-anchor=\"middle\" stroke=\"black\" fill=\"white\">]]..tankpercent..[[%</text>]]\n        if tname == true then returnsvg = returnsvg..[[<text x=\"]]..startpoint+padvalue*i+2*padvalue*(i-1)+padvalue..[[%\" y=\"]]..bartop-(tpad/2)*fuelh..[[%\" text-anchor=\"middle\" stroke=\"black\" fill=\"white\">]]..tankname..[[</text>]] end\n    end\n     return returnsvg\nend\n\n----------------DrawFuelLevels end-------------------------------------------\n\n----------------Handler Function Library start-------------------------------------------\n\nCruiseMode = \"Normal\"\nfunction ChangeCruise()\n    local mode = unit.getControlMode()\n    if CruiseMode == \"Normal\" then\n        CruiseMode = \"Slow\"\n        if mode==0 then \n            unit.cancelCurrentControlMasterMode()\n            Nav:update()\n\n        end\n        Nav.axisCommandManager.axisCommands[0].targetSpeed = slowcruise\n        unit.setAxisCommandValue(0,slowcruise)\n    elseif CruiseMode == \"Slow\" then\n        CruiseMode = \"MaxSpeed\"\n        if mode==0 then \n            unit.cancelCurrentControlMasterMode()\n            Nav:update()\n\n        end\n        Nav.axisCommandManager.axisCommands[0].targetSpeed = atmolimit\n               unit.setAxisCommandValue(0,atmolimit)\n    else\n        CruiseMode = \"Normal\"\n        if mode==1 then\n            unit.cancelCurrentControlMasterMode()\n            Nav:update()\n            autobrake = \"OFF\"\n        end\n        Nav.axisCommandManager.axisCommands[0].throttle = 0\n        brakeInput = 0\n    end\nend\nfunction toggleBrake()\n    if autobrake == \"OFF\" then\n        autobrake = \"ON\"\n        brakeInput = brakeInput + 1\n    else\n        autobrake = \"OFF\"\n        brakeInput = brakeInput - 1\n    end \nend\nfunction toggleAltHold()\n    if altHold == \"OFF\" then\n        altHold = \"ON\"\n        stabilizer = \"ON\"\n        stabilizerHold = math.floor(core.getAltitude())\n    else\n        altHold = \"OFF\"\n        stabilizer = \"OFF\"\n    end  \nend\nfunction toggleStabilizer()\n    if stabilizer == \"OFF\" then\n        stabilizer = \"ON\"\n    else\n        stabilizer = \"OFF\"\n        altHold = \"OFF\"\n    end \nend\nfunction autoGear()\n    if telemeter ~= nil then\n        cast = telemeter.raycast()\n        if (cast.distance > 10 or cast.hit ==  false) then unit.retractLandingGears()\n        else\n        unit.deployLandingGears()\n        end\n    end\nend\nfunction toggleHover()\n    if Nav.axisCommandManager.targetGroundAltitude > 0 then\n        Nav.axisCommandManager:setTargetGroundAltitude(-1)\n        unit.deployLandingGears()\n        stabilizer = \"OFF\"\n        altHold = \"OFF\"\n    else\n        unit.retractLandingGears()\n        Nav.axisCommandManager:setTargetGroundAltitude(Nav.axisCommandManager.targetGroundAltitudeCapabilities[1])\n    end\nend\nfunction changeAgg(val)\n    agset = agset + val\n    if agset < 1000 then agset = 1000 end\n    antigrav.setTargetAltitude(agset)\nend\nfunction changeFont(val)\n    Hud_font_size = Hud_font_size+5*val\n    scaledFont = (16*sx/1980)*((Hud_font_size)/100) \nend\nfunction changeStroke(val)\n    Hud_line_size = Hud_line_size+5*val\n    scaledStroke = (1*sx/1980)*((Hud_line_size)/100) \nend\nfunction changeOpacity(val)\n    Hud_Opacity_percent = Hud_Opacity_percent+5*val\n    if Hud_Opacity_percent > 100 then Hud_Opacity_percent = 100 end\n    opacity = Hud_Opacity_percent/100    \nend\nfunction DoorCTRL(dlist, action)\n    for i,v in ipairs(dlist) do\n        if action == \"open\" then\n            v.open()\n        else\n            v.close()\n        end\n    end\nend\n\nfunction FieldCTRL(flist, action)\n    for i,v in ipairs(flist) do\n        if action == \"deploy\" then\n            v.deploy()\n        else\n            v.retract()\n        end\n    end\nend\nfunction SwitchCTRL(slist, action)\n    for i,v in ipairs(slist) do\n        if action == \"activate\" then\n            v.activate()\n        else\n            v.deactivate()\n        end\n    end\nend\nfunction buildDMGList()\n    local elid = core.getElementIdList()\n    returnList = {}\n    returnList.title = \"Damaged Elements\"\n    returnList.dmg = false\n    returnList.destroyed = false\n    for i,v in ipairs(elid) do\n        local dmg = math.floor(100*core.getElementHitPointsById(v)/core.getElementMaxHitPointsById(v))\n        if dmg ==0 then table.insert(returnList,1,core.getElementNameById(v)..\":\"..dmg..\"%\") returnList.destroyed = true\n        elseif dmg < 100 then table.insert(returnList,core.getElementNameById(v)..\":\"..dmg..\"%\") returnList.dmg = true end\n    end\n    return returnList\nend\n----------------Handler Function Library end-------------------------------------------\n----------------Draw Functions start------------------------------------------\n\nfunction DrawTableRow(x, y, w, h, m, r, fc, sc, tc, txt, align, split)\n    local margin = w*m/100\n    rtrtext = \"\"\n    rtrtext= rtrtext..[[<g><clipPath id=\"listclip\"><rect x=\"]]..x..[[%\" y=\"]]..y..[[%\" width=\"]]..w-margin..[[%\" height=\"]]..h..[[%\"/></clipPath>]]\n    rtrtext = rtrtext..[[<rect x=\"]]..x..[[%\" y=\"]]..y..[[%\" rx=\"]]..r..[[%\" ry=\"]]..r..[[%\" width=\"]]..w..[[%\" height=\"]]..h..[[%\" fill=\"]]..fc..[[\" stroke=\"]]..sc..[[\" />]]\n    if align == \"start\" then rtrtext = rtrtext..[[<text x=\"]]..x+margin..[[%\" y=\"]]..y+0.5*h..[[%\" text-anchor=\"start\" dominant-baseline=\"middle\" clip-path=\"url(#listclip)\" fill=\"]]..tc..[[\">]]..txt..[[</text>]]\n    elseif align == \"middle\" then rtrtext = rtrtext..[[<text x=\"]]..x+(w/2)..[[%\" y=\"]]..y+0.5*h..[[%\" text-anchor=\"middle\" dominant-baseline=\"middle\" clip-path=\"url(#listclip)\" fill=\"]]..tc..[[\">]]..txt..[[</text>]]\n    elseif align == \"end\" then rtrtext = rtrtext..[[<text x=\"]]..x+w-margin..[[%\" y=\"]]..y+0.5*h..[[%\" text-anchor=\"end\" dominant-baseline=\"middle\" clip-path=\"url(#listclip)\" fill=\"]]..tc..[[\">]]..txt..[[</text>]]\n    end\n    rtrtext = rtrtext..[[</g>]]\n    return rtrtext\nend\n----------------Draw Functions end------------------------------------------\n\n--DrawTableRow(x, y, w, h, m, r, fc, sc, tc, txt, align, splitpercent)\n----------------DrawTable start------------------------------------------\nfunction DrawTable(listx, listy, listw, fontheight, dlist, numitems, listpage, split)\n    local rfactor = 0.5\n    local lineheight = 2*fontheight\n    local margin = listw*0.02\n    local pgcount = math.ceil(#dlist/numitems)\n    local listh = 0\n    local pgtxt = \"\"\n    local returntxt = \"\"\n    local lcount = 0\n    local splitp = split or 0.80\n    \n    if string.len(dlist.title)>0 then\n        returntxt = returntxt..DrawTableRow(listx, listy, listw, 2*lineheight,2, 0.25,\"#737CA1\",\"red\",\"white\", dlist.title, \"middle\")\n        lcount = 1\n    end\n    for i,v in ipairs(dlist) do\n        if i > numitems*(listpage-1) and i<=numitems*listpage then        \n            idx = string.find(v,\":\") \n            if idx == nil then \n                lcount = lcount + 1\n                returntxt=returntxt..DrawTableRow(listx, listy+(lcount*lineheight), listw, lineheight,2, 0,\"#737CA1\",\"blue\",\"white\", v, \"middle\")       \n            else\n                lcount = lcount + 1\n                returntxt = returntxt..DrawTableRow(listx, listy+(lcount*lineheight), splitp*listw, lineheight,2, 0,\"#737CA1\",\"blue\",\"white\", string.sub(v,1,idx), \"start\")\n                returntxt = returntxt..DrawTableRow(listx+(splitp*listw), listy+(lcount*lineheight), (1-splitp)*listw, lineheight,2, 0,\"#737CA1\",\"blue\",\"white\", string.sub(v,idx+1,string.len(v)), \"end\")\n            end\n        end\n    end    \n    returntxt = returntxt..DrawTableRow(listx, listy+(lcount+1)*lineheight, listw, lineheight,2, 0,\"#737CA1\",\"red\",\"white\", listpage..\"/\"..pgcount, \"middle\")   \n    return returntxt\nend\n----------------DrawTable end------------------------------------------\n----------------TO-DO Boarded menu start-----------------------------------\n\nfunction printboarded()\n    local boarded = construct.getPlayersOnBoard()\n    if boarded ~= nil then\n        system.print(\"Players boarded:\"..#boarded)\n        \n    end    \n    --system.getPlayerName(id)   \nend\nprintboarded()\n----------------Boarded menu end-----------------------------------\n-------------------TO-DO Docking Menu start-----------------------------\n\nparentingPanelId = system.createWidgetPanel(\"Docking\")\nparentingWidgetId = system.createWidget(parentingPanelId,\"parenting\")\nsystem.addDataToWidget(unit.getWidgetDataId(),parentingWidgetId)\n-------------------Docking Menu end-----------------------------\n\n----------------Build Menus start-------------------------------------------\ncmdpageFirst = {\n                [1]=function()  toggleBrake() end,\n                [2]=function()  if menupage > 1 then menupage = menupage - 1 end end,\n                [3]=function()  if menupage < #menupages then menupage = menupage + 1 end end,\n                [4]=function()  toggleAltHold()  end,\n                [5]=function()  toggleStabilizer() end,\n                [6]=function()  stabilizerHold = stabilizerHold - 50 end,\n                [7]=function()  stabilizerHold = stabilizerHold + 50 end,\n                [8]=function()  ChangeCruise() end,\n                [9]=function()  end,\n                [10]=function() toggleHover() end\n            }\nmpageFirst = {title=\"Atmo Flight\", \"Alt 4:  Altitude Hold Toggle\",\"Alt 5:  Stabilizer Toggle\",\"Alt 6:  Alt Hold -50\",\"Alt 7:  Alt Hold +50\",\"Alt 8: Cruise Toggle\"}\n\n\ncmdpageLast = {\n                [1]=function()  toggleBrake() end,\n                [2]=function()  if menupage > 1 then menupage = menupage - 1 end end,\n                [3]=function()  if menupage < #menupages then menupage = menupage + 1 end end,\n                [4]=function()  changeOpacity(-1) end,\n                [5]=function()  changeOpacity(1) end,\n                [6]=function()  changeFont(-1) end,\n                [7]=function()  changeFont(1)end,\n                [8]=function()  changeStroke(-1) end,\n                [9]=function()  changeStroke(1) end,\n                [10]=function() toggleHover() end\n            }\nmpageLast = {title=\"HUD Config\",\"Alt 4:  Opacity-\",\"Alt 5:  Opacity+\",\"Alt 6:  Font-\",\"Alt 7:  Fon+\",\"Alt 8:  Line-\",\"Alt 9:  Line+\"}\n\ncmdpageagg = {\n                [1]=function()  toggleBrake() end,\n                [2]=function()  if menupage > 1 then menupage = menupage - 1 end end,\n                [3]=function()  if menupage < #menupages then menupage = menupage + 1 end end,\n                [4]=function()  changeAgg(-50)end,\n                [5]=function()  changeAgg(50)end,\n                [6]=function()  changeAgg(-500)end,\n                [7]=function()  changeAgg(500)end,\n                [8]=function()  end,\n                [9]=function()  end,\n                [10]=function() toggleHover() end\n            }\nmpageagg = {title=\"Antigrav\",\"Alt 4: Antigrav -50\",\"Alt 5: Antigrav +50\",\"Alt 6: Antigrav -500\",\"Alt 7: Antigrav +500\"}\ncmdpageshield = {\n                [1]=function()  toggleBrake() end,\n                [2]=function()  if menupage > 1 then menupage = menupage - 1 end end,\n                [3]=function()  if menupage < #menupages then menupage = menupage + 1 end end,\n                [4]=function()  if shield ~=nil then shield.toggle()end end,\n                [5]=function()  if shield ~=nil then shield.startVenting()end end,\n                [6]=function()  if shield ~=nil then shield.stopVenting()end end,\n                [7]=function()  end,\n                [8]=function()  end,\n                [9]=function()  end,\n                [10]=function() toggleHover() end\n            }\nmpageshield = {title=\"Shield\",\"Alt 4: Shield Toggle\",\"Alt 5: Start Vent\",\"Alt 4: Stop Vent\"}\ncmdpageDMG = {\n                [1]=function()  toggleBrake() end,\n                [2]=function()  if menupage > 1 then menupage = menupage - 1 end end,\n                [3]=function()  if menupage < #menupages then menupage = menupage + 1 end end,\n                [4]=function()  ShowDMG = not ShowDMG end,\n                [5]=function()  DMGpage = DMGpage - 1 end,\n                [6]=function()  DMGpage = DMGpage + 1 end,\n                [7]=function()  DMGitems = DMGitems - 1 end,\n                [8]=function()  DMGitems = DMGitems + 1 end,\n                [9]=function()  end,\n                [10]=function() toggleHover() end\n            }\nmpageDMG = {title=\"Damage\", \"Alt 4:Damage List Toggle\",\"Alt 5:Damage List Page-\",\"Alt 6:Damage List Page+\",\"Alt 7:Damage List Items-\",\"Alt 8:Damage List items+\"}\ncmdpagegeneric = {\n                [1]=function()  toggleBrake() end,\n                [2]=function()  if menupage > 1 then menupage = menupage - 1 end end,\n                [3]=function()  if menupage < #menupages then menupage = menupage + 1 end end,\n                [4]=function()  end,\n                [5]=function()  end,\n                [6]=function()  end,\n                [7]=function()  end,\n                [8]=function()  end,\n                [9]=function()  end,\n                [10]=function() toggleHover() end\n            }\nmpagegeneric = {title=\"Generic\",}\n\ncmdpages = {cmdpageFirst, cmdpageLast}\nmenupages = {mpageFirst, mpageLast}\n---------------insert conditional pages\nif shield ~= nil then table.insert(cmdpages,2,cmdpageshield) table.insert(menupages,2,mpageshield) end\nif antigrav ~= nil then table.insert(cmdpages,2,cmdpageagg) table.insert(menupages,2,mpageagg) end\ntable.insert(cmdpages,2,cmdpageDMG) table.insert(menupages,2,mpageDMG)\n---------------format pages----------------------\nfor i,v in ipairs(menupages) do\n    table.insert(v,1,\"Alt 1:  Autobrake Toggle\")\n    if i == 1 then table.insert(v,2,\"-\") else table.insert(v,2,\"&lt;Alt 2\") end\n    if i == #menupages then table.insert(v,3,\"-\") else table.insert(v,3,\"Alt 3&gt;\") end\n    table.insert(v, \"G   :  Hover Toggle\" )\n    if antigrav ~= nil then table.insert(v,\"Alt G:  Antigrav Toggle\") end\n    if warpdrive ~= nil then table.insert(v,\"Alt J:  Activate Warp\") end\nend\nfunction CmdHandler(cmd)\n    cmdpages[menupage][cmd]()\nend\n----------------Build Menus end-------------------------------------------\n\n\n----------------DrawMenu start-------------------------------------------\n-----call DrawMenu(Menu_x_pos, Menu_y_pos, Menu_width, 100*scaledFont/sx, menupages, menupage)\n\nfunction DrawMenu(menux, menuy, menuw, fontheight, mpages, menup)\n\n    local rfactor = 0.5\n    local lineheight = 2*fontheight\n    local menuh = (#mpages[menup]+2)*lineheight  \n    local margin = menuw*0.02\n    local returntxt = \"<g>\"\n\n    returntxt= returntxt..[[<rect x=\"]]..menux..[[%\" y=\"]]..menuy..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\" width=\"]]..menuw..[[%\" height=\"]]..menuh..[[%\" fill=\"gray\" stroke=\"blue\" />]]\n    if displayTime == true then returntxt = returntxt..[[\n        <text x=\"]]..menux+(menuw/2)..[[%\" y=\"]]..(1*lineheight + menuy)..[[%\"  text-anchor=\"middle\" fill=\"white\">]]..makeTime(timemode12)..[[ </text>]]\n    end\n    returntxt= returntxt..[[<text x=\"]]..menux+margin..[[%\" y=\"]]..((2)*lineheight + menuy)..[[%\"  text-anchor=\"start\"  fill=\"white\">Alt 1:</text>\n    <text x=\"]]..menux+menuw-margin..[[%\" y=\"]]..((2)*lineheight + menuy)..[[%\"  text-anchor=\"end\"  fill=\"white\">Autobrake Toggle</text>\n    <line x1=\"]]..menux..[[%\" y1=\"]]..((2.5)*lineheight + menuy)..[[%\" x2=\"]]..menux+menuw..[[%\" y2=\"]]..((2.5)*lineheight + menuy)..[[%\" stroke-width=\"]]..(2*scaledStroke)..[[\" stroke=\"red\"></line>\n    <text x=\"]]..menux+margin..[[%\" y=\"]]..((3.5)*lineheight + menuy)..[[%\"  text-anchor=\"start\"  fill=\"white\">]]..mpages[menup][2]..[[</text>\n    <text x=\"]]..menux+menuw-margin..[[%\" y=\"]]..((3.5)*lineheight + menuy)..[[%\"  text-anchor=\"end\"  fill=\"white\">]]..mpages[menup][3]..[[</text>\n    <text x=\"]]..menux+(menuw/2)..[[%\" y=\"]]..((3.5)*lineheight + menuy)..[[%\"  text-anchor=\"middle\"  fill=\"white\">]]..mpages[menup].title..[[</text>\n    <line x1=\"]]..menux..[[%\" y1=\"]]..((4)*lineheight + menuy)..[[%\" x2=\"]]..menux+menuw..[[%\" y2=\"]]..((4)*lineheight + menuy)..[[%\" stroke-width=\"]]..(2*scaledStroke)..[[\" stroke=\"red\"></line>\n    \n    ]]  \n    for i,v in ipairs(mpages[menup]) do\n        if i > 3 then\n            idx = string.find(v,\":\") \n            returntxt= returntxt..[[\n            <line x1=\"]]..menux..[[%\" y1=\"]]..((i+1.25)*lineheight + menuy)..[[%\" x2=\"]]..menux+menuw..[[%\" y2=\"]]..((i+1.25)*lineheight + menuy)..[[%\" stroke-width=\"]]..(0.5*scaledStroke)..[[\"  stroke=\"blue\"></line>\n            <text x=\"]]..menux+margin..[[%\" y=\"]]..((i+1)*lineheight + menuy)..[[%\"  text-anchor=\"start\"  fill=\"white\">]]..string.sub(v,1,idx)..[[</text>\n            <text x=\"]]..menux+menuw-margin..[[%\" y=\"]]..((i+1)*lineheight + menuy)..[[%\"  text-anchor=\"end\"  fill=\"white\">]]..string.sub(v,idx+1,string.len(v))..[[</text>\n            ]]\n        end    \n    end\n    if menup == #mpages then\n        returntxt= returntxt..[[\n        <rect x=\"]]..menux+menuw..[[%\" y=\"]]..4.5*lineheight+menuy..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\" width=\"]]..(menuw/4)..[[%\" height=\"]]..1.5*lineheight..[[%\" fill=\"gray\" stroke=\"blue\" />\n        <text x=\"]]..menux+(1.125*menuw)..[[%\" y=\"]]..((5.5)*lineheight + menuy)..[[%\"  text-anchor=\"middle\"  fill=\"white\">]]..Hud_Opacity_percent..[[%</text>\n        <rect x=\"]]..menux+menuw..[[%\" y=\"]]..6.5*lineheight+menuy..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\" width=\"]]..(menuw/4)..[[%\" height=\"]]..1.5*lineheight..[[%\" fill=\"gray\" stroke=\"blue\" />\n        <text x=\"]]..menux+(1.125*menuw)..[[%\" y=\"]]..((7.5)*lineheight + menuy)..[[%\"  text-anchor=\"middle\"  fill=\"white\">]]..Hud_font_size..[[%</text>\n        <rect x=\"]]..menux+menuw..[[%\" y=\"]]..8.5*lineheight+menuy..[[%\" rx=\"]]..rfactor..[[%\" ry=\"]]..rfactor..[[%\" width=\"]]..(menuw/4)..[[%\" height=\"]]..1.5*lineheight..[[%\" fill=\"gray\" stroke=\"blue\" />\n        <text x=\"]]..menux+(1.125*menuw)..[[%\" y=\"]]..((9.5)*lineheight + menuy)..[[%\"  text-anchor=\"middle\"  fill=\"white\">]]..Hud_line_size..[[%</text>\n        ]]\n    end\n\n    returntxt= returntxt..[[</g>]] \n    if ShowDMG == true then\n        local dlist = buildDMGList()\n        if #dlist < DMGitems or DMGpage < 1 then DMGpage = 1 end\n        if DMGitems < 1 then DMGitems = 1 end\n        if DMGitems > 40 then DMGitems = 40 end\n        if DMGpage > math.ceil(#dlist/DMGitems) then DMGpage = math.ceil(#dlist/DMGitems) end\n        returntxt= returntxt..DrawTable(menux+menuw+0.25*menuw, menuy, 15, 100*scaledFont/sx, dlist, DMGitems, DMGpage,0.8) \n    end\n    \n    return returntxt\nend\n----------------DrawMenu end------------------------------------------\n\n\n----------------Startup start-----------------------------------------\n\nfunction startup()\n    if unit.isAnyLandingGearDeployed()==1 then\n        unit.deployLandingGears()\n    else\n        unit.retractLandingGears()\n    end \n    if doorList ~= nil then DoorCTRL(doorList, \"close\") end\n    if switchList ~= nil then SwitchCTRL(switchList, \"activate\") end\n    if fieldList ~= nil then FieldCTRL(fieldList, \"retract\") end  \nend\n----------------Startup end-----------------------------------------\n\n----------------Shutdown start-----------------------------------------\n\nfunction shutdown()\n    if doorList ~= nil then DoorCTRL(doorList, \"open\") end\n    if switchList ~= nil then SwitchCTRL(switchList, \"deactivate\") end\n    if fieldList ~= nil then FieldCTRL(fieldList, \"deploy\") end  \nend\n----------------Shutdown end-----------------------------------------\n\n----------------DrawHorizon start-------------------------------------------\n\nfunction drawHorizon()\n    local xreturnsvg=\"\"\n    local returnatmo=\"\"\n    local brakestat=\"\"\n    local pitchsvg=\"\"\n    local rollsvg=\"\"\n    local ctrltxt = \"\"\n    local speed = math.floor(3.6*vec3(construct.getVelocity()):len())\n    local BurnSpeed = math.floor(3.6*construct.getFrictionBurnSpeed())\n    atmolimit = BurnSpeed - 50\n    local p = 0\n    local r = 0\n    local alt =\"\"\n    local coredata = json.decode(core.getWidgetData())\n    local gearExtended = (Nav.control.isAnyLandingGearDeployed() == 1)\n    hoverset = Nav.axisCommandManager.targetGroundAltitude\n    hovermax = Nav.axisCommandManager.targetGroundAltitudeCapabilities[1]\n    local altHoldColor = \"blue\"\n    local pitchColor = \"white\"\n    local rollColor = \"white\"\n    \n    if CruiseMode == \"MaxSpeed\" then unit.setAxisCommandValue(0,atmolimit) end\n     \n       \n    if type(coredata.altitude)=='string' then \n        alt = \"Space\"\n        showatmo=false \n    else \n        alt = math.floor(coredata.altitude) \n        p=PitchDeg \n        r=RollDeg \n        showatmo=true \n    end  \n    if unit.getControlMode()==0 then\n        ctrltxt = [[<text x=\"62%\" y=\"49%\" text-anchor=\"end\" fill=\"white\" >Throttle: ]]..math.floor(100*unit.getAxisCommandValue(0))..[[%</text>\n        <text x=\"62%\" y=\"51.5%\" text-anchor=\"end\" fill=\"white\" >Mode: ]]..CruiseMode..[[</text>]]\n    else\n        ctrltxt = [[<text x=\"62%\" y=\"49%\" text-anchor=\"end\" fill=\"white\" >Cruise Set: ]]..math.floor(unit.getAxisCommandValue(0))..[[</text>\n        <text x=\"62%\" y=\"51.5%\" text-anchor=\"end\" fill=\"white\" >Mode: ]]..CruiseMode..[[</text>]]\n    end\n    ctrltxt = ctrltxt..[[\n    <text x=\"62%\" y=\"44%\" font-size=\"125%\" text-anchor=\"end\" fill=\"white\" >Speed: ]]..speed..[[</text>          \n    <text x=\"62%\" y=\"42%\" font-size=\"75%\" text-anchor=\"end\" fill=\"red\" >Burn: ]]..BurnSpeed..[[</text>          \n    ]]\n    \n    if antigrav ~= nil then\n        local aggColor = \"red\"\n        if antigrav.isActive()==1 then aggColor = \"green\" end\n        ctrltxt = ctrltxt..[[\n        <text x=\"65%\" y=\"57%\"  text-anchor=\"start\"  fill=\"white\">AGG Set: </text>\n        <text x=\"69%\" y=\"57%\"  text-anchor=\"start\"  fill=\"white\">]]..agset..[[</text>\n        <text x=\"65%\" y=\"59%\"  text-anchor=\"start\"  fill=\"white\">Current: </text>\n        <text x=\"69%\" y=\"59%\"  text-anchor=\"start\"  fill=\"white\">]]..math.floor(antigrav.getBaseAltitude())..[[ </text>\n        <text x=\"65%\" y=\"61%\"  text-anchor=\"start\"  fill=\"]]..aggColor..[[\">PWR: </text>\n        <text x=\"69%\" y=\"61%\"  text-anchor=\"start\"  fill=\"]]..aggColor..[[\">]]..math.floor(antigrav.getFieldPower()*100)..[[%</text>\n        ]]\n    end\n    if shield ~= nil then\n        if shield.isActive() == 1 then\n            local shieldpercent = math.floor((shield.getShieldHitpoints()/shield.getMaxShieldHitpoints())*100)\n            if shieldpercent < 10 then\n            shieldColor = \"red\"\n            elseif shieldpercent > 10 and shieldpercent < 50 then\n                shieldColor = \"orange\"\n            else \n                 shieldColor = \"blue\"\n            end\n            ctrltxt = ctrltxt..[[\n            <circle cx=\"67%\" cy=\"50%\" r=\"2%\" fill=\"gray\" opacity=\"50%\" stroke-width=\"]]..(4*scaledStroke)..[[\" stroke=\"]]..shieldColor..[[\"></circle>      \n            <text x=\"67%\" y=\"50.5%\"  text-anchor=\"middle\"   fill=\"]]..shieldColor..[[\">]]..shieldpercent..[[%</text>\n            ]]\n            \n        end\n        if shield.isVenting == true then\n                ctrltxt = ctrltxt..[[\n                    <text x=\"72%\" y=\"50.5%\"  text-anchor=\"middle\"   fill=\"red\">VENTING</text>\n                    ]]\n        elseif shield.getVentingCooldown() > 0 then\n                ctrltxt = ctrltxt..[[\n                    <text x=\"72%\" y=\"50.5%\"  text-anchor=\"middle\"   fill=\"red\">Cooldown:]]..math.floor(shield.getVentingCooldown())..[[</text>\n                    ]]\n        end\n    end\n    if warpdrive ~= nil then\n        local warpstat = json.decode(warpdrive.getWidgetData())\n        if warpstat.destination ~= \"Unknown\" then\n            local warpstatColor = \"white\"\n            local warpbuttonColor = \"red\"\n        \n            if warpstat.showError == true then\n                    warpstatColor = \"red\"\n            end\n            if warpstat.enableButton == true then\n                warpbuttonColor = \"green\"\n            end\n            ctrltxt = ctrltxt..[[\n            <text x=\"65%\" y=\"40%\"  text-anchor=\"start\"  fill=\"white\">Warp: </text>\n            <text x=\"69%\" y=\"40%\"  text-anchor=\"start\"  fill=\"white\">]]..warpstat.destination..[[</text>\n            <text x=\"65%\" y=\"42%\"  text-anchor=\"start\"  fill=\"white\">Cells: </text>\n            <text x=\"69%\" y=\"42%\"  text-anchor=\"start\"  fill=\"white\">]]..warpdrive.getRequiredWarpCells()..[[/]]..warpdrive.getAvailableWarpCells()..[[ </text>\n            <text x=\"65%\" y=\"44%\"  text-anchor=\"start\"  fill=\"]]..warpbuttonColor..[[\">]]..warpstat.buttonText..[[</text>\n            <text x=\"65%\" y=\"46%\"  text-anchor=\"start\"  fill=\"]]..warpstatColor..[[\">]]..warpstat.statusText..[[</text>\n            ]]\n               \n        end\n    end\n\n    if speed < autostabspeed and speed < autorollspeed and stabilizer ==\"OFF\" and showatmo==true then \n        pitchColor = \"blue\"\n        rollColor = \"blue\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"34.5%\" y=\"50.5%\"  fill=\"blue\" text-anchor=\"end\" >Auto</text>\n        <text x=\"50%\" y=\"21.5%\" fill=\"blue\" text-anchor=\"middle\" >Auto</text>\n        ]]\n    elseif speed > autostabspeed and speed < autorollspeed and stabilizer ==\"OFF\" and showatmo==true then \n        pitchColor = \"white\"\n        rollColor = \"blue\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"50%\" y=\"21%\" fill=\"blue\" text-anchor=\"middle\" >Auto</text>\n        ]]\n    elseif speed < autostabspeed and speed > autorollspeed and stabilizer ==\"OFF\" and showatmo==true then \n        pitchColor = \"blue\"\n        rollColor = \"white\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"34.5%\" y=\"50.5%\"  fill=\"blue\" text-anchor=\"end\" >Auto</text>\n        ]]\n    elseif stabilizer ==\"ON\" and altHold == \"OFF\" and showatmo==true then \n        rollColor = \"red\" \n        pitchColor = \"red\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"34.5%\" y=\"50.5%\"  fill=\"red\" text-anchor=\"end\" >Locked</text>\n        <text x=\"50%\" y=\"21.5%\" fill=\"red\" text-anchor=\"middle\" >Locked</text>   \n        ]]\n    elseif stabilizer ==\"ON\" and altHold == \"ON\" and showatmo==true then \n        rollColor = \"red\" \n        pitchColor = \"blue\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"34.5%\" y=\"50.5%\"  fill=\"blue\" text-anchor=\"end\" >Auto</text>\n        <text x=\"50%\" y=\"21.5%\" fill=\"red\" text-anchor=\"middle\" >Locked</text>   \n        ]]\n    else\n        rollColor = \"white\" \n        pitchColor = \"white\"\n    end\n    \n    if altHold == \"ON\" and showatmo==true then \n        altHoldColor = \"red\" \n        pitchColor = \"blue\"\n         ctrltxt = ctrltxt..[[\n        <text x=\"62%\" y=\"58%\" text-anchor=\"end\" fill=]]..altHoldColor..[[ font-size=\"100%\" stroke=\"white\">Hold: ]]..stabilizerHold..[[</text>\n        ]]\n    end\n    if (autobrake==\"ON\" or brakeInput > 0) then\n        ctrltxt= ctrltxt..[[\n        <text x=\"49%\" y=\"45%\" text-anchor=\"end\" fill=\"red\" stroke=\"white\" font-size=\"125%\" >BRAKE</text>\n        ]]\n        if autobrake==\"ON\" then\n            ctrltxt = ctrltxt..[[\n            <text x=\"51%\" y=\"45%\" text-anchor=\"start\" fill=\"red\" stroke=\"white\" font-size=\"125%\" >LOCKED</text>        \n            ]]\n            else\n            ctrltxt = ctrltxt..[[\n            <text x=\"51%\" y=\"45%\" text-anchor=\"start\" fill=\"red\" stroke=\"white\" font-size=\"125%\" >ENGAGED</text>\n            ]]\n        end\n    end\n    if gearExtended then\n        ctrltxt= ctrltxt..[[\n        <text x=\"49%\" y=\"56%\" text-anchor=\"middle\" fill=\"red\" stroke=\"white\">G</text>\n        <circle cx=\"48%\" cy=\"55.5%\" r=\".5%\" stroke=\"none\" fill=\"green\" ></circle>\n        ]]\n    end\n    if hoverset > 0 then\n        ctrltxt= ctrltxt..[[\n        <text x=\"50%\" y=\"57%\" text-anchor=\"middle\" fill=\"red\" font-size=\"75%\" stroke=\"white\">]]..hoverset..[[/]]..hovermax..[[</text>\n        ]]\n    end\n       \n----------------PitchSVG start----------------------------------------- \n    if p>0 then pitchmsig = math.floor(p/10)*10 else pitchmsig = math.ceil(p/10)*10 end\n    pitchlsig = p - pitchmsig\n    pitchsvg = [[\n    <g clip-path=\"url(#pitchclip)\">\n    <g fill=]]..pitchColor..[[ opacity=\"]]..opacity..[[\" transform=\"translate(0,]]..(2*pitchlsig*sy/1000)..[[)\" stroke=\"white\" font-size=\"75%\" text-anchor=\"start\" font-weight=\"normal\">\n    <text x=\"35.5%\" y=\"50.5%\"  text-anchor=\"end\" >]]..pitchmsig..[[</text>\n    <text x=\"35.5%\" y=\"52.5%\"  text-anchor=\"end\" >]]..(pitchmsig-10)..[[</text>\n    <text x=\"35.5%\" y=\"54.5%\"  text-anchor=\"end\" >]]..(pitchmsig-20)..[[</text>\n    <text x=\"35.5%\" y=\"56.5%\"  text-anchor=\"end\" >]]..(pitchmsig-30)..[[</text>\n    <text x=\"35.5%\" y=\"44.5%\"  text-anchor=\"end\" >]]..(pitchmsig+30)..[[</text>\n    <text x=\"35.5%\" y=\"46.5%\"  text-anchor=\"end\" >]]..(pitchmsig+20)..[[</text>\n    <text x=\"35.5%\" y=\"48.5%\"  text-anchor=\"end\" >]]..(pitchmsig+10)..[[</text>\n    <line x1=\"36%\" y1=\"50%\" x2=\"37%\" y2=\"50%\"></line>\n    <line x1=\"36%\" y1=\"52%\" x2=\"37%\" y2=\"52%\"></line>\n    <line x1=\"36%\" y1=\"54%\" x2=\"37%\" y2=\"54%\"></line>\n    <line x1=\"36%\" y1=\"56%\" x2=\"37%\" y2=\"56%\"></line>   \n    <line x1=\"36%\" y1=\"48%\" x2=\"37%\" y2=\"48%\"></line>\n    <line x1=\"36%\" y1=\"46%\" x2=\"37%\" y2=\"46%\"></line>\n    <line x1=\"36%\" y1=\"44%\" x2=\"37%\" y2=\"44%\"></line>\n    <line x1=\"36.5%\" y1=\"43%\" x2=\"37%\" y2=\"43%\"></line>\n    <line x1=\"36.5%\" y1=\"51%\" x2=\"37%\" y2=\"51%\"></line>\n    <line x1=\"36.5%\" y1=\"53%\" x2=\"37%\" y2=\"53%\"></line>\n    <line x1=\"36.5%\" y1=\"55%\" x2=\"37%\" y2=\"55%\"></line>\n    <line x1=\"36.5%\" y1=\"57%\" x2=\"37%\" y2=\"57%\"></line>   \n    <line x1=\"36.5%\" y1=\"49%\" x2=\"37%\" y2=\"49%\"></line>\n    <line x1=\"36.5%\" y1=\"47%\" x2=\"37%\" y2=\"47%\"></line>\n    <line x1=\"36.5%\" y1=\"45%\" x2=\"37%\" y2=\"45%\"></line> \n    </g>\n    </g>\n    ]]\n----------------PitchSVG end-------------------------------------------\n----------------RollSVG start-----------------------------------------\n    if r>0 then rollmsig = math.floor(r/10)*10 else rollmsig = math.ceil(r/10)*10 end\n    rolllsig = r - rollmsig\n    rollsvg = [[\n    <g clip-path=\"url(#rollclip)\">\n    <g fill=]]..rollColor..[[ opacity=\"]]..opacity..[[\" stroke=\"white\" font-size=\"75%\" text-anchor=\"middle\" font-weight=\"normal\" >\n    <text x=\"50%\" y=\"20%\" fill=\"white\" >]]..r..[[</text>\n    <polygon fill=\"white\" points=\"]]..(.5*sx)..\",\"..(0.17*sy)..\" \"..(.495*sx)..\",\"..(0.18*sy)..\" \"..(.505*sx)..\",\"..(0.18*sy)..[[\" transform=\"rotate(0,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></polygon>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(]]..(5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\">]]..(rollmsig-10)..[[</text>\n    <line x1=\"50%\" y1=\"16.25%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(2.5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(]]..(10+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\">]]..(rollmsig-20)..[[</text>\n    <line x1=\"50%\" y1=\"16.25%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(7.5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(10+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(]]..(15+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\">]]..(rollmsig-30)..[[</text>\n    <line x1=\"50%\" y1=\"16.25%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(12.5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(15+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    \n    <text x=\"50%\" y=\"15%\" transform=\"rotate(]]..(rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\">]]..rollmsig..[[</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    \n    <text x=\"50%\" y=\"15%\" transform=\"rotate(]]..(-5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\">]]..(rollmsig+10)..[[</text>\n    <line x1=\"50%\" y1=\"16.25%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(-2.5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(-5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(]]..(-10+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\">]]..(rollmsig+20)..[[</text>\n    <line x1=\"50%\" y1=\"16.25%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(-7.5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(-10+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\"\" transform=\"rotate(]]..(-15+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\">]]..(rollmsig+30)..[[</text>\n    <line x1=\"50%\" y1=\"16.25%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(-12.5+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(]]..(-15+rolllsig/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    </g>\n    </g>\n    ]]\n----------------RollSVG end-------------------------------------------\n    if showatmo==true then\n        \n        returnatmo=[[\n        <g fill=\"none\" stroke=\"white\" text-anchor=\"start\" font-weight=\"bold\">\n        <text x=\"62%\" y=\"56%\" font-size=\"125%\" text-anchor=\"end\" fill=\"white\" >Alt: ]]..alt..[[</text>\n        <line x1=\"50%\" y1=\"48%\" x2=\"50%\" y2=\"44%\"></line>\n        <line x1=\"50%\" y1=\"52%\" x2=\"50%\" y2=\"56%\"></line>\n        <line x1=\"38%\" y1=\"50%\" x2=\"48%\" y2=\"50%\"></line>\n        <line x1=\"52%\" y1=\"50%\" x2=\"62%\" y2=\"50%\"></line>\n        <text x=\"37.5%\" y=\"50.5%\" fill=\"white\" font-size=\"75%\" text-anchor=\"middle\" >]]..p..[[</text>\n        <rect x=\"0%\" y=\"0%\" rx=\"1%\" ry=\"1%\" width=\"100%\" height=\"100%\" fill=\"none\" stroke=\"black\" /></g>\n        \n        ]]..ctrltxt..[[\n        \n        </g>\n        <g transform=\"rotate(]]..r..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\" fill=\"none\" stroke=\"blue\" font-weight=\"bold\">\n        <circle cx=\"50%\" cy=\"50%\" r=\"1%\" ></circle>\n        <line x1=\"50%\" y1=\"47%\" x2=\"50%\" y2=\"49%\" ></line>\n        <line x1=\"50%\" y1=\"53%\" x2=\"50%\" y2=\"51%\"></line>\n        <line x1=\"45%\" y1=\"50%\" x2=\"49.5%\" y2=\"50%\"></line>\n        <line x1=\"55%\" y1=\"50%\" x2=\"50.5%\" y2=\"50%\"></line>\n        \n        </g>\n        ]]..pitchsvg..rollsvg\n    else\n        returnatmo=[[\n        <g fill=\"none\" stroke=\"white\" text-anchor=\"start\" font-weight=\"bold\" font-size=\"100%\">\n        ]]..ctrltxt..[[\n        \n        <circle cx=\"50%\" cy=\"50%\" r=\"1%\" fill=\"none\" stroke=\"blue\" ></circle>\n        <rect x=\"0%\" y=\"0%\" rx=\"1%\" ry=\"1%\" width=\"100%\" height=\"100%\" fill=\"none\" stroke=\"black\" /></g>\n            \n        </g>]]\n    end\n----------------SVGsetup start-----------------------------------------\n    local xreturnsvg = [[<div style=\"\n            height:100%;\n            width:100%;\n            position:absolute;\n            top:0;\n            left:0;\n            \">\n            <svg height=\"]]..sy..[[\" width=\"]]..sx..[[\" stroke-width=\"]]..scaledStroke..[[\" font-size=\"]]..scaledFont..[[\" opacity=\"]]..opacity..[[\">            \n            <defs>  \n                <clipPath id=\"pitchclip\">\n                    <rect x=\"33%\" y=\"45%\" width=\"6%\" height=\"10%\"/> \n                </clipPath>\n                <clipPath id=\"rollclip\">\n                    <rect x=\"45%\" y=\"14%\" width=\"10%\" height=\"10%\"/> \n                </clipPath>\n            </defs>\n            \n\n\n            ]]..returnatmo..DrawMenu(Menu_x_pos, Menu_y_pos, Menu_width, 100*scaledFont/sx, menupages, menupage)..DrawFuelLevels(tankListN, tankListK, tankListR, fuel_xpos, fuel_ypos, fuel_height, fuel_scale, 100*scaledFont/sx, WarnPoint, CriticalPoint, showTankname)..[[\n            </svg></div>]]      \n    return xreturnsvg\n----------------SVGsetup end-----------------------------------------\nend\n-------------------DrawHorizon End----------------------------------\n\n\n----------------Start ship------------------------\nstartup()\ninit=true","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"\nshutdown()","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"1"},{"code":"-- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu\n\nlocal pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nlocal yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nlocal rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\nlocal brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01\nlocal brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\nlocal autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)\nlocal autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01\n\nlocal turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is\nlocal turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\nlocal torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\n\n-----added autoroll and stabilizer\nlocal stabilizerthreshold = 5 --xport\nlocal maxPitchCorrection = 10 --export: [Atmo Only] Maximum pitch correction when autopitch is engaged. Higher number may result in greater oscillation\nspeed = 3.6*vec3(construct.getVelocity()):len()\nif (stabilizer == \"ON\" or speed < autorollspeed )then\n    autoRoll = true\nelse\n    autoRoll = false\nend\n\n-- validate params\npitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)\nyawSpeedFactor = math.max(yawSpeedFactor, 0.01)\nrollSpeedFactor = math.max(rollSpeedFactor, 0.01)\ntorqueFactor = math.max(torqueFactor, 0.01)\nbrakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)\nbrakeFlatFactor = math.max(brakeFlatFactor, 0.01)\nautoRollFactor = math.max(autoRollFactor, 0.01)\nturnAssistFactor = math.max(turnAssistFactor, 0.01)\n\n-- final inputs\nlocal finalPitchInput = pitchInput + system.getControlDeviceForwardInput()\nlocal finalRollInput = rollInput + system.getControlDeviceYawInput()\nlocal finalYawInput = yawInput - system.getControlDeviceLeftRightInput()\nlocal finalBrakeInput = brakeInput\n\n-- Axis\nlocal worldVertical = vec3(core.getWorldVertical()) -- along gravity\nlocal constructUp = vec3(construct.getWorldOrientationUp())\nlocal constructForward = vec3(construct.getWorldOrientationForward())\nlocal constructRight = vec3(construct.getWorldOrientationRight())\nlocal constructVelocity = vec3(construct.getWorldVelocity())\nlocal constructVelocityDir = vec3(construct.getWorldVelocity()):normalize()\nlocal currentRollDeg = getRoll(worldVertical, constructForward, constructRight)\nlocal currentRollDegAbs = math.abs(currentRollDeg)\nlocal currentRollDegSign = utils.sign(currentRollDeg)\n\n\n--adding pitch-----added\nlocal currentPitchDeg = -math.asin(constructForward:dot(worldVertical)) * constants.rad2deg\nlocal currentPitchDegAbs = math.abs(currentPitchDeg)\nlocal currentPitchDegSign = utils.sign(currentPitchDeg)\n--adding height check\nlocal holdheightvariance = stabilizerHold - math.floor(core.getAltitude())\n--Recoding stats-------added\nPitchDeg = math.floor(currentPitchDegAbs)*currentPitchDegSign\nRollDeg = math.floor(currentRollDegAbs)*currentRollDegSign\n\n-- Rotation\nlocal constructAngularVelocity = vec3(construct.getWorldAngularVelocity())\nlocal targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight\n                                + finalRollInput * rollSpeedFactor * constructForward\n                                + finalYawInput * yawSpeedFactor * constructUp\n\n-- In atmosphere?\nif worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then\n    local autoRollRollThreshold = 1.0\n    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling\n    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then\n        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit\n        if (rollPID == nil) then\n            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range\n        end\n        rollPID:inject(targetRollDeg - currentRollDeg)\n        local autoRollInput = rollPID:get()\n\n        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward\n    end\n    local turnAssistRollThreshold = 20.0\n    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing\n    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then\n        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range\n        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range\n\n        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)\n        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180\n        local rollVerticalRatio = 0\n        if rescaleRollDegAbs < 90 then\n            rollVerticalRatio = rescaleRollDegAbs / 90\n        elseif rescaleRollDegAbs < 180 then\n            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90\n        end\n\n        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio\n\n        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)\n        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio\n\n        targetAngularVelocity = targetAngularVelocity\n                            + turnAssistPitchInput * constructRight\n                            + turnAssistYawInput * constructUp\n    end\n    if (stabilizer == \"ON\" or 3.6*constructVelocity:len() < autostabspeed) then\n        local PitchCorrection = -currentPitchDeg\n        if (pitchPID == nil) then\n            pitchPID = pid.new(2 * 0.01, 0, 2 * 0.1) -- magic number tweaked to have a default factor in the 1-10 range\n        end\n        if utils.threshold(holdheightvariance, stabilizerthreshold) and altHold == \"ON\" then\n           PitchCorrection = utils.clamp(holdheightvariance / 5, -maxPitchCorrection,maxPitchCorrection) - currentPitchDeg\n        end\n        pitchPID:inject(PitchCorrection)\n        local autoPitchInput = pitchPID:get()\n        targetAngularVelocity = targetAngularVelocity + autoPitchInput * constructRight\n    end\nend\n\n-- Engine commands\nlocal keepCollinearity = 1 -- for easier reading\nlocal dontKeepCollinearity = 0 -- for easier reading\nlocal tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities\n\n-- Rotation\nlocal angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)\nlocal airAcceleration = vec3(construct.getWorldAirFrictionAngularAcceleration())\nangularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction\nNav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)\n\n-- Brakes\nlocal brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)\nNav:setEngineForceCommand('brake', brakeAcceleration)\n\n-- AutoNavigation regroups all the axis command by 'TargetSpeed'\nlocal autoNavigationEngineTags = ''\nlocal autoNavigationAcceleration = vec3()\nlocal autoNavigationUseBrake = false\n\n-- Longitudinal Translation\nlocal longitudinalEngineTags = 'thrust analog longitudinal'\nlocal longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byThrottle) then\n    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)\n    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)\nelseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)\n    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags\n    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration\n    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop\n        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking\n    then\n        autoNavigationUseBrake = true\n    end\n\nend\n\n-- Lateral Translation\nlocal lateralStrafeEngineTags = 'thrust analog lateral'\nlocal lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)\nif (lateralCommandType == axisCommandType.byThrottle) then\n    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)\n    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)\nelseif  (lateralCommandType == axisCommandType.byTargetSpeed) then\n    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)\n    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags\n    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration\nend\n\n-- Vertical Translation\nlocal verticalStrafeEngineTags = 'thrust analog vertical'\nlocal verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)\nif (verticalCommandType == axisCommandType.byThrottle) then\n    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)\n    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)\nelseif  (verticalCommandType == axisCommandType.byTargetSpeed) then\n    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)\n    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags\n    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration\nend\n\n-- Auto Navigation (Cruise Control)\nif (autoNavigationAcceleration:len() > constants.epsilon) then\n    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward\n    then\n        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'\n    end\n    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)\nend\n\n-- Rockets\nNav:setBoosterCommand('rocket_engine')\n","filter":{"args":[],"signature":"onFlush()","slotKey":"-4"},"key":"2"},{"code":"Nav:update()\n\nHudSVG=\"\"\nif init==true then\n    HudSVG = drawHorizon()\n    system.setScreen(HudSVG)\n    system.showScreen(hud_state)\n    if telemeter ~= nil then autoGear() end\nend","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"3"},{"code":"CmdHandler(10)","filter":{"args":[{"value":"gear"}],"signature":"onActionStart(gear)","slotKey":"-4"},"key":"4"},{"code":"if unit.isAnyHeadlightSwitchedOn() == 1 then\n    unit.switchOffHeadlights()\nelse\n    unit.switchOnHeadlights()\nend\n","filter":{"args":[{"value":"light"}],"signature":"onActionStart(light)","slotKey":"-4"},"key":"5"},{"code":"pitchInput = pitchInput - 1","filter":{"args":[{"value":"forward"}],"signature":"onActionStart(forward)","slotKey":"-4"},"key":"6"},{"code":"pitchInput = pitchInput + 1","filter":{"args":[{"value":"forward"}],"signature":"onActionStop(forward)","slotKey":"-4"},"key":"7"},{"code":"pitchInput = pitchInput + 1","filter":{"args":[{"value":"backward"}],"signature":"onActionStart(backward)","slotKey":"-4"},"key":"8"},{"code":"pitchInput = pitchInput - 1","filter":{"args":[{"value":"backward"}],"signature":"onActionStop(backward)","slotKey":"-4"},"key":"9"},{"code":"rollInput = rollInput - 1","filter":{"args":[{"value":"left"}],"signature":"onActionStart(left)","slotKey":"-4"},"key":"10"},{"code":"rollInput = rollInput + 1","filter":{"args":[{"value":"left"}],"signature":"onActionStop(left)","slotKey":"-4"},"key":"11"},{"code":"rollInput = rollInput + 1","filter":{"args":[{"value":"right"}],"signature":"onActionStart(right)","slotKey":"-4"},"key":"12"},{"code":"rollInput = rollInput - 1","filter":{"args":[{"value":"right"}],"signature":"onActionStop(right)","slotKey":"-4"},"key":"13"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)","filter":{"args":[{"value":"straferight"}],"signature":"onActionStart(straferight)","slotKey":"-4"},"key":"14"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)","filter":{"args":[{"value":"straferight"}],"signature":"onActionStop(straferight)","slotKey":"-4"},"key":"15"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)","filter":{"args":[{"value":"strafeleft"}],"signature":"onActionStart(strafeleft)","slotKey":"-4"},"key":"16"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)","filter":{"args":[{"value":"strafeleft"}],"signature":"onActionStop(strafeleft)","slotKey":"-4"},"key":"17"},{"code":"Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()\nNav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)\n","filter":{"args":[{"value":"up"}],"signature":"onActionStart(up)","slotKey":"-4"},"key":"18"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)\nNav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)\n","filter":{"args":[{"value":"up"}],"signature":"onActionStop(up)","slotKey":"-4"},"key":"19"},{"code":"Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()\nNav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)\n","filter":{"args":[{"value":"down"}],"signature":"onActionStart(down)","slotKey":"-4"},"key":"20"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)\nNav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)\n","filter":{"args":[{"value":"down"}],"signature":"onActionStop(down)","slotKey":"-4"},"key":"21"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"onActionStart(groundaltitudeup)","slotKey":"-4"},"key":"22"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"onActionLoop(groundaltitudeup)","slotKey":"-4"},"key":"23"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"onActionStart(groundaltitudedown)","slotKey":"-4"},"key":"24"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"onActionLoop(groundaltitudedown)","slotKey":"-4"},"key":"25"},{"code":"yawInput = yawInput - 1","filter":{"args":[{"value":"yawright"}],"signature":"onActionStart(yawright)","slotKey":"-4"},"key":"26"},{"code":"yawInput = yawInput + 1","filter":{"args":[{"value":"yawright"}],"signature":"onActionStop(yawright)","slotKey":"-4"},"key":"27"},{"code":"yawInput = yawInput + 1","filter":{"args":[{"value":"yawleft"}],"signature":"onActionStart(yawleft)","slotKey":"-4"},"key":"28"},{"code":"yawInput = yawInput - 1","filter":{"args":[{"value":"yawleft"}],"signature":"onActionStop(yawleft)","slotKey":"-4"},"key":"29"},{"code":"brakeInput = brakeInput + 1\nlocal longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n    if (math.abs(targetSpeed) > constants.epsilon) then\n        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n    end\nend\n","filter":{"args":[{"value":"brake"}],"signature":"onActionStart(brake)","slotKey":"-4"},"key":"30"},{"code":"brakeInput = brakeInput - 1","filter":{"args":[{"value":"brake"}],"signature":"onActionStop(brake)","slotKey":"-4"},"key":"31"},{"code":"local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n    if (math.abs(targetSpeed) > constants.epsilon) then\n        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n    end\nend\n","filter":{"args":[{"value":"brake"}],"signature":"onActionLoop(brake)","slotKey":"-4"},"key":"32"},{"code":"Nav:toggleBoosters()","filter":{"args":[{"value":"booster"}],"signature":"onActionStart(booster)","slotKey":"-4"},"key":"33"},{"code":"Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)","filter":{"args":[{"value":"stopengines"}],"signature":"onActionStart(stopengines)","slotKey":"-4"},"key":"34"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)","filter":{"args":[{"value":"speedup"}],"signature":"onActionStart(speedup)","slotKey":"-4"},"key":"35"},{"code":"Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)","filter":{"args":[{"value":"speedup"}],"signature":"onActionLoop(speedup)","slotKey":"-4"},"key":"36"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)","filter":{"args":[{"value":"speeddown"}],"signature":"onActionStart(speeddown)","slotKey":"-4"},"key":"37"},{"code":"Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)","filter":{"args":[{"value":"speeddown"}],"signature":"onActionLoop(speeddown)","slotKey":"-4"},"key":"38"},{"code":"if antigrav ~= nil then antigrav.toggle() end","filter":{"args":[{"value":"antigravity"}],"signature":"onActionStart(antigravity)","slotKey":"-4"},"key":"39"},{"code":"CmdHandler(3)","filter":{"args":[{"value":"option3"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"40"},{"code":"CmdHandler(4)","filter":{"args":[{"value":"option4"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"41"},{"code":"CmdHandler(5)","filter":{"args":[{"value":"option5"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"42"},{"code":"CmdHandler(6)","filter":{"args":[{"value":"option6"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"43"},{"code":"CmdHandler(7)","filter":{"args":[{"value":"option7"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"44"},{"code":"CmdHandler(8)","filter":{"args":[{"value":"option8"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"45"},{"code":"CmdHandler(9)","filter":{"args":[{"value":"option9"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"46"},{"code":"CmdHandler(1)","filter":{"args":[{"value":"option1"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"47"},{"code":"CmdHandler(2)","filter":{"args":[{"value":"option2"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"48"}],"methods":[],"events":[]}
